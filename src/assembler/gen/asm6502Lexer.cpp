
// Generated from asm6502.g4 by ANTLR 4.10.1


#include "asm6502Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Asm6502LexerStaticData final {
  Asm6502LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Asm6502LexerStaticData(const Asm6502LexerStaticData&) = delete;
  Asm6502LexerStaticData(Asm6502LexerStaticData&&) = delete;
  Asm6502LexerStaticData& operator=(const Asm6502LexerStaticData&) = delete;
  Asm6502LexerStaticData& operator=(Asm6502LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag asm6502lexerLexerOnceFlag;
Asm6502LexerStaticData *asm6502lexerLexerStaticData = nullptr;

void asm6502lexerLexerInitialize() {
  assert(asm6502lexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<Asm6502LexerStaticData>(
    std::vector<std::string>{
      "SEMICOLON", "COMMENT", "WHITESPACE", "NEWLINE", "UNDERSCORE", "PLUS", 
      "MINUS", "STAR", "SLASH", "LOW_BYTE_VALUE", "HIGH_BYTE_VALUE", "LBRACKET", 
      "RBRACKET", "LPAREN", "RPAREN", "HASH", "COLON", "AT", "QUOTE", "DOT", 
      "LETTER", "DIGIT", "IDENTIFIER", "PRINTABLE", "COMMA", "X_INDEX", 
      "Y_INDEX", "OCTAL_ID", "OCTAL_DIGIT", "OCTAL_BYTE", "OCTAL_NUMBER", 
      "HEX_ID", "HEX_DIGIT", "HEX_BYTE", "HEX_NUMBER", "DECIMAL_ID", "DECIMAL_BYTE", 
      "DECIMAL_NUMBER", "BINARY_ID", "BINARY_DIGIT", "BINARY_BYTE", "BINARY_NUMBER", 
      "CHARACTER", "ORG", "EQU", "NOP", "IMPLIED", "BRANCH", "SHIFT", "JUMP", 
      "JSR", "LOAD", "STORE", "COMPARE", "LOGIC", "ARITH", "INC", "MNEMONIC", 
      "ILLEGAL", "ACC", "SYMBOL"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "'_'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'['", 
      "']'", "'('", "')'", "'#'", "':'", "'@'", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'NOP'", "", "", "", "", "", "", "", "'A'"
    },
    std::vector<std::string>{
      "", "COMMENT", "WHITESPACE", "NEWLINE", "UNDERSCORE", "PLUS", "MINUS", 
      "STAR", "SLASH", "LOW_BYTE_VALUE", "HIGH_BYTE_VALUE", "LBRACKET", 
      "RBRACKET", "LPAREN", "RPAREN", "HASH", "COLON", "AT", "X_INDEX", 
      "Y_INDEX", "OCTAL_BYTE", "OCTAL_NUMBER", "HEX_BYTE", "HEX_NUMBER", 
      "DECIMAL_BYTE", "DECIMAL_NUMBER", "BINARY_BYTE", "BINARY_NUMBER", 
      "CHARACTER", "ORG", "EQU", "NOP", "IMPLIED", "BRANCH", "SHIFT", "JUMP", 
      "JSR", "MNEMONIC", "ILLEGAL", "ACC", "SYMBOL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,600,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,5,1,128,
  	8,1,10,1,12,1,131,9,1,1,2,4,2,134,8,2,11,2,12,2,135,1,3,3,3,139,8,3,1,
  	3,1,3,4,3,143,8,3,11,3,12,3,144,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
  	8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
  	1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
  	3,22,185,8,22,1,22,1,22,1,22,5,22,190,8,22,10,22,12,22,193,9,22,3,22,
  	195,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
  	1,27,3,27,210,8,27,1,28,1,28,1,29,1,29,1,29,1,29,3,29,218,8,29,3,29,220,
  	8,29,1,30,1,30,1,30,1,30,1,30,4,30,227,8,30,11,30,12,30,228,1,31,1,31,
  	1,31,3,31,234,8,31,1,32,1,32,1,33,1,33,1,33,3,33,241,8,33,1,34,1,34,1,
  	34,1,34,4,34,247,8,34,11,34,12,34,248,1,35,1,35,1,35,1,36,3,36,255,8,
  	36,1,36,1,36,1,36,3,36,260,8,36,3,36,262,8,36,1,37,1,37,1,37,1,37,1,37,
  	4,37,269,8,37,11,37,12,37,270,1,38,1,38,1,38,3,38,276,8,38,1,39,1,39,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,289,8,40,3,40,291,8,
  	40,3,40,293,8,40,3,40,295,8,40,3,40,297,8,40,3,40,299,8,40,3,40,301,8,
  	40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,4,41,312,8,41,11,41,12,
  	41,313,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,327,
  	8,43,1,44,1,44,1,44,1,44,3,44,333,8,44,1,45,1,45,1,45,1,45,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	3,46,411,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
  	437,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	3,48,451,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,3,51,470,8,51,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,1,52,3,52,481,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,3,53,492,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,3,54,506,8,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,514,8,
  	55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,522,8,56,1,57,1,57,1,57,1,57,1,
  	57,1,57,3,57,530,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,595,8,
  	58,1,59,1,59,1,60,1,60,0,0,61,1,0,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,
  	19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,0,39,0,41,0,43,
  	0,45,0,47,0,49,0,51,18,53,19,55,0,57,0,59,20,61,21,63,0,65,0,67,22,69,
  	23,71,0,73,24,75,25,77,0,79,0,81,26,83,27,85,28,87,29,89,30,91,31,93,
  	32,95,33,97,34,99,35,101,36,103,0,105,0,107,0,109,0,111,0,113,0,115,37,
  	117,38,119,39,121,40,1,0,8,2,0,10,10,13,13,2,0,9,9,32,32,2,0,65,90,97,
  	122,1,0,48,57,1,0,50,294,1,0,48,55,2,0,36,36,38,38,3,0,48,57,65,70,97,
  	102,679,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
  	0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
  	1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
  	0,0,0,35,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
  	0,67,1,0,0,0,0,69,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,81,1,0,0,0,0,83,
  	1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
  	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,125,1,0,0,
  	0,5,133,1,0,0,0,7,142,1,0,0,0,9,146,1,0,0,0,11,148,1,0,0,0,13,150,1,0,
  	0,0,15,152,1,0,0,0,17,154,1,0,0,0,19,156,1,0,0,0,21,158,1,0,0,0,23,160,
  	1,0,0,0,25,162,1,0,0,0,27,164,1,0,0,0,29,166,1,0,0,0,31,168,1,0,0,0,33,
  	170,1,0,0,0,35,172,1,0,0,0,37,174,1,0,0,0,39,176,1,0,0,0,41,178,1,0,0,
  	0,43,180,1,0,0,0,45,184,1,0,0,0,47,196,1,0,0,0,49,198,1,0,0,0,51,200,
  	1,0,0,0,53,203,1,0,0,0,55,209,1,0,0,0,57,211,1,0,0,0,59,213,1,0,0,0,61,
  	221,1,0,0,0,63,233,1,0,0,0,65,235,1,0,0,0,67,237,1,0,0,0,69,242,1,0,0,
  	0,71,250,1,0,0,0,73,254,1,0,0,0,75,263,1,0,0,0,77,275,1,0,0,0,79,277,
  	1,0,0,0,81,279,1,0,0,0,83,302,1,0,0,0,85,315,1,0,0,0,87,318,1,0,0,0,89,
  	332,1,0,0,0,91,334,1,0,0,0,93,410,1,0,0,0,95,436,1,0,0,0,97,450,1,0,0,
  	0,99,452,1,0,0,0,101,456,1,0,0,0,103,469,1,0,0,0,105,480,1,0,0,0,107,
  	491,1,0,0,0,109,505,1,0,0,0,111,513,1,0,0,0,113,521,1,0,0,0,115,529,1,
  	0,0,0,117,594,1,0,0,0,119,596,1,0,0,0,121,598,1,0,0,0,123,124,5,59,0,
  	0,124,2,1,0,0,0,125,129,3,1,0,0,126,128,8,0,0,0,127,126,1,0,0,0,128,131,
  	1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,4,1,0,0,0,131,129,1,0,0,0,
  	132,134,7,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,
  	1,0,0,0,136,6,1,0,0,0,137,139,5,13,0,0,138,137,1,0,0,0,138,139,1,0,0,
  	0,139,140,1,0,0,0,140,143,5,10,0,0,141,143,5,13,0,0,142,138,1,0,0,0,142,
  	141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,8,1,0,
  	0,0,146,147,5,95,0,0,147,10,1,0,0,0,148,149,5,43,0,0,149,12,1,0,0,0,150,
  	151,5,45,0,0,151,14,1,0,0,0,152,153,5,42,0,0,153,16,1,0,0,0,154,155,5,
  	47,0,0,155,18,1,0,0,0,156,157,5,60,0,0,157,20,1,0,0,0,158,159,5,62,0,
  	0,159,22,1,0,0,0,160,161,5,91,0,0,161,24,1,0,0,0,162,163,5,93,0,0,163,
  	26,1,0,0,0,164,165,5,40,0,0,165,28,1,0,0,0,166,167,5,41,0,0,167,30,1,
  	0,0,0,168,169,5,35,0,0,169,32,1,0,0,0,170,171,5,58,0,0,171,34,1,0,0,0,
  	172,173,5,64,0,0,173,36,1,0,0,0,174,175,5,39,0,0,175,38,1,0,0,0,176,177,
  	5,46,0,0,177,40,1,0,0,0,178,179,7,2,0,0,179,42,1,0,0,0,180,181,7,3,0,
  	0,181,44,1,0,0,0,182,185,3,41,20,0,183,185,3,9,4,0,184,182,1,0,0,0,184,
  	183,1,0,0,0,185,194,1,0,0,0,186,190,3,41,20,0,187,190,3,43,21,0,188,190,
  	3,9,4,0,189,186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,193,1,0,0,
  	0,191,189,1,0,0,0,191,192,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,194,
  	191,1,0,0,0,194,195,1,0,0,0,195,46,1,0,0,0,196,197,7,4,0,0,197,48,1,0,
  	0,0,198,199,5,44,0,0,199,50,1,0,0,0,200,201,3,49,24,0,201,202,5,88,0,
  	0,202,52,1,0,0,0,203,204,3,49,24,0,204,205,5,89,0,0,205,54,1,0,0,0,206,
  	207,5,48,0,0,207,210,5,111,0,0,208,210,3,35,17,0,209,206,1,0,0,0,209,
  	208,1,0,0,0,210,56,1,0,0,0,211,212,7,5,0,0,212,58,1,0,0,0,213,214,3,55,
  	27,0,214,219,3,57,28,0,215,217,3,57,28,0,216,218,3,57,28,0,217,216,1,
  	0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,215,1,0,0,0,219,220,1,0,0,0,
  	220,60,1,0,0,0,221,222,3,55,27,0,222,223,3,57,28,0,223,224,3,57,28,0,
  	224,226,3,57,28,0,225,227,3,57,28,0,226,225,1,0,0,0,227,228,1,0,0,0,228,
  	226,1,0,0,0,228,229,1,0,0,0,229,62,1,0,0,0,230,234,7,6,0,0,231,232,5,
  	48,0,0,232,234,5,120,0,0,233,230,1,0,0,0,233,231,1,0,0,0,234,64,1,0,0,
  	0,235,236,7,7,0,0,236,66,1,0,0,0,237,238,3,63,31,0,238,240,3,65,32,0,
  	239,241,3,65,32,0,240,239,1,0,0,0,240,241,1,0,0,0,241,68,1,0,0,0,242,
  	243,3,63,31,0,243,244,3,65,32,0,244,246,3,65,32,0,245,247,3,65,32,0,246,
  	245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,70,1,
  	0,0,0,250,251,5,48,0,0,251,252,5,100,0,0,252,72,1,0,0,0,253,255,3,71,
  	35,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,261,3,43,21,
  	0,257,259,3,43,21,0,258,260,3,43,21,0,259,258,1,0,0,0,259,260,1,0,0,0,
  	260,262,1,0,0,0,261,257,1,0,0,0,261,262,1,0,0,0,262,74,1,0,0,0,263,264,
  	3,73,36,0,264,265,3,43,21,0,265,266,3,43,21,0,266,268,3,43,21,0,267,269,
  	3,43,21,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,
  	0,0,271,76,1,0,0,0,272,273,5,48,0,0,273,276,5,98,0,0,274,276,5,37,0,0,
  	275,272,1,0,0,0,275,274,1,0,0,0,276,78,1,0,0,0,277,278,2,48,49,0,278,
  	80,1,0,0,0,279,280,3,77,38,0,280,300,3,79,39,0,281,298,3,79,39,0,282,
  	296,3,79,39,0,283,294,3,79,39,0,284,292,3,79,39,0,285,290,3,79,39,0,286,
  	288,3,79,39,0,287,289,3,79,39,0,288,287,1,0,0,0,288,289,1,0,0,0,289,291,
  	1,0,0,0,290,286,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,285,1,0,0,
  	0,292,293,1,0,0,0,293,295,1,0,0,0,294,284,1,0,0,0,294,295,1,0,0,0,295,
  	297,1,0,0,0,296,283,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,282,1,
  	0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,281,1,0,0,0,300,301,1,0,0,0,
  	301,82,1,0,0,0,302,303,3,77,38,0,303,304,3,79,39,0,304,305,3,79,39,0,
  	305,306,3,79,39,0,306,307,3,79,39,0,307,308,3,79,39,0,308,309,3,79,39,
  	0,309,311,3,79,39,0,310,312,3,79,39,0,311,310,1,0,0,0,312,313,1,0,0,0,
  	313,311,1,0,0,0,313,314,1,0,0,0,314,84,1,0,0,0,315,316,3,37,18,0,316,
  	317,3,47,23,0,317,86,1,0,0,0,318,326,3,39,19,0,319,320,5,79,0,0,320,321,
  	5,82,0,0,321,327,5,71,0,0,322,323,5,82,0,0,323,324,5,79,0,0,324,325,5,
  	82,0,0,325,327,5,71,0,0,326,319,1,0,0,0,326,322,1,0,0,0,327,88,1,0,0,
  	0,328,329,5,69,0,0,329,330,5,81,0,0,330,333,5,85,0,0,331,333,5,61,0,0,
  	332,328,1,0,0,0,332,331,1,0,0,0,333,90,1,0,0,0,334,335,5,78,0,0,335,336,
  	5,79,0,0,336,337,5,80,0,0,337,92,1,0,0,0,338,339,5,80,0,0,339,340,5,76,
  	0,0,340,411,5,65,0,0,341,342,5,80,0,0,342,343,5,72,0,0,343,411,5,80,0,
  	0,344,345,5,80,0,0,345,346,5,72,0,0,346,411,5,65,0,0,347,348,5,80,0,0,
  	348,349,5,76,0,0,349,411,5,80,0,0,350,351,5,82,0,0,351,352,5,84,0,0,352,
  	411,5,73,0,0,353,354,5,82,0,0,354,355,5,84,0,0,355,411,5,83,0,0,356,357,
  	5,83,0,0,357,358,5,69,0,0,358,411,5,67,0,0,359,360,5,67,0,0,360,361,5,
  	76,0,0,361,411,5,67,0,0,362,363,5,67,0,0,363,364,5,76,0,0,364,411,5,73,
  	0,0,365,366,5,83,0,0,366,367,5,69,0,0,367,411,5,73,0,0,368,369,5,73,0,
  	0,369,370,5,78,0,0,370,411,5,89,0,0,371,372,5,68,0,0,372,373,5,69,0,0,
  	373,411,5,89,0,0,374,375,5,84,0,0,375,376,5,88,0,0,376,411,5,65,0,0,377,
  	378,5,84,0,0,378,379,5,65,0,0,379,411,5,88,0,0,380,381,5,84,0,0,381,382,
  	5,65,0,0,382,411,5,89,0,0,383,384,5,84,0,0,384,385,5,89,0,0,385,411,5,
  	65,0,0,386,387,5,66,0,0,387,388,5,82,0,0,388,411,5,75,0,0,389,390,5,67,
  	0,0,390,391,5,76,0,0,391,411,5,86,0,0,392,393,5,84,0,0,393,394,5,83,0,
  	0,394,411,5,88,0,0,395,396,5,84,0,0,396,397,5,88,0,0,397,411,5,83,0,0,
  	398,399,5,73,0,0,399,400,5,78,0,0,400,411,5,88,0,0,401,402,5,68,0,0,402,
  	403,5,69,0,0,403,411,5,88,0,0,404,405,5,83,0,0,405,406,5,69,0,0,406,411,
  	5,68,0,0,407,408,5,67,0,0,408,409,5,76,0,0,409,411,5,68,0,0,410,338,1,
  	0,0,0,410,341,1,0,0,0,410,344,1,0,0,0,410,347,1,0,0,0,410,350,1,0,0,0,
  	410,353,1,0,0,0,410,356,1,0,0,0,410,359,1,0,0,0,410,362,1,0,0,0,410,365,
  	1,0,0,0,410,368,1,0,0,0,410,371,1,0,0,0,410,374,1,0,0,0,410,377,1,0,0,
  	0,410,380,1,0,0,0,410,383,1,0,0,0,410,386,1,0,0,0,410,389,1,0,0,0,410,
  	392,1,0,0,0,410,395,1,0,0,0,410,398,1,0,0,0,410,401,1,0,0,0,410,404,1,
  	0,0,0,410,407,1,0,0,0,411,94,1,0,0,0,412,413,5,66,0,0,413,414,5,80,0,
  	0,414,437,5,76,0,0,415,416,5,66,0,0,416,417,5,77,0,0,417,437,5,73,0,0,
  	418,419,5,66,0,0,419,420,5,86,0,0,420,437,5,67,0,0,421,422,5,66,0,0,422,
  	423,5,86,0,0,423,437,5,83,0,0,424,425,5,66,0,0,425,426,5,67,0,0,426,437,
  	5,67,0,0,427,428,5,66,0,0,428,429,5,67,0,0,429,437,5,83,0,0,430,431,5,
  	66,0,0,431,432,5,78,0,0,432,437,5,69,0,0,433,434,5,66,0,0,434,435,5,69,
  	0,0,435,437,5,81,0,0,436,412,1,0,0,0,436,415,1,0,0,0,436,418,1,0,0,0,
  	436,421,1,0,0,0,436,424,1,0,0,0,436,427,1,0,0,0,436,430,1,0,0,0,436,433,
  	1,0,0,0,437,96,1,0,0,0,438,439,5,65,0,0,439,440,5,83,0,0,440,451,5,76,
  	0,0,441,442,5,76,0,0,442,443,5,83,0,0,443,451,5,82,0,0,444,445,5,82,0,
  	0,445,446,5,79,0,0,446,451,5,76,0,0,447,448,5,82,0,0,448,449,5,79,0,0,
  	449,451,5,82,0,0,450,438,1,0,0,0,450,441,1,0,0,0,450,444,1,0,0,0,450,
  	447,1,0,0,0,451,98,1,0,0,0,452,453,5,74,0,0,453,454,5,77,0,0,454,455,
  	5,80,0,0,455,100,1,0,0,0,456,457,5,74,0,0,457,458,5,83,0,0,458,459,5,
  	82,0,0,459,102,1,0,0,0,460,461,5,76,0,0,461,462,5,68,0,0,462,470,5,89,
  	0,0,463,464,5,76,0,0,464,465,5,68,0,0,465,470,5,65,0,0,466,467,5,76,0,
  	0,467,468,5,68,0,0,468,470,5,88,0,0,469,460,1,0,0,0,469,463,1,0,0,0,469,
  	466,1,0,0,0,470,104,1,0,0,0,471,472,5,83,0,0,472,473,5,84,0,0,473,481,
  	5,65,0,0,474,475,5,83,0,0,475,476,5,84,0,0,476,481,5,89,0,0,477,478,5,
  	83,0,0,478,479,5,84,0,0,479,481,5,88,0,0,480,471,1,0,0,0,480,474,1,0,
  	0,0,480,477,1,0,0,0,481,106,1,0,0,0,482,483,5,67,0,0,483,484,5,80,0,0,
  	484,492,5,89,0,0,485,486,5,67,0,0,486,487,5,80,0,0,487,492,5,88,0,0,488,
  	489,5,67,0,0,489,490,5,77,0,0,490,492,5,80,0,0,491,482,1,0,0,0,491,485,
  	1,0,0,0,491,488,1,0,0,0,492,108,1,0,0,0,493,494,5,65,0,0,494,495,5,78,
  	0,0,495,506,5,68,0,0,496,497,5,79,0,0,497,498,5,82,0,0,498,506,5,65,0,
  	0,499,500,5,69,0,0,500,501,5,79,0,0,501,506,5,82,0,0,502,503,5,66,0,0,
  	503,504,5,73,0,0,504,506,5,84,0,0,505,493,1,0,0,0,505,496,1,0,0,0,505,
  	499,1,0,0,0,505,502,1,0,0,0,506,110,1,0,0,0,507,508,5,65,0,0,508,509,
  	5,68,0,0,509,514,5,67,0,0,510,511,5,83,0,0,511,512,5,66,0,0,512,514,5,
  	67,0,0,513,507,1,0,0,0,513,510,1,0,0,0,514,112,1,0,0,0,515,516,5,73,0,
  	0,516,517,5,78,0,0,517,522,5,67,0,0,518,519,5,68,0,0,519,520,5,69,0,0,
  	520,522,5,67,0,0,521,515,1,0,0,0,521,518,1,0,0,0,522,114,1,0,0,0,523,
  	530,3,103,51,0,524,530,3,105,52,0,525,530,3,107,53,0,526,530,3,109,54,
  	0,527,530,3,111,55,0,528,530,3,113,56,0,529,523,1,0,0,0,529,524,1,0,0,
  	0,529,525,1,0,0,0,529,526,1,0,0,0,529,527,1,0,0,0,529,528,1,0,0,0,530,
  	116,1,0,0,0,531,532,5,74,0,0,532,533,5,65,0,0,533,595,5,77,0,0,534,535,
  	5,83,0,0,535,536,5,76,0,0,536,595,5,79,0,0,537,538,5,65,0,0,538,539,5,
  	78,0,0,539,595,5,67,0,0,540,541,5,82,0,0,541,542,5,76,0,0,542,595,5,65,
  	0,0,543,544,5,83,0,0,544,545,5,82,0,0,545,595,5,69,0,0,546,547,5,65,0,
  	0,547,548,5,76,0,0,548,595,5,82,0,0,549,550,5,82,0,0,550,551,5,82,0,0,
  	551,595,5,65,0,0,552,553,5,65,0,0,553,554,5,82,0,0,554,595,5,82,0,0,555,
  	556,5,83,0,0,556,557,5,65,0,0,557,595,5,88,0,0,558,559,5,65,0,0,559,560,
  	5,78,0,0,560,595,5,69,0,0,561,562,5,83,0,0,562,563,5,72,0,0,563,595,5,
  	65,0,0,564,565,5,84,0,0,565,566,5,65,0,0,566,595,5,83,0,0,567,568,5,83,
  	0,0,568,569,5,72,0,0,569,595,5,89,0,0,570,571,5,83,0,0,571,572,5,72,0,
  	0,572,595,5,88,0,0,573,574,5,76,0,0,574,575,5,65,0,0,575,595,5,88,0,0,
  	576,577,5,76,0,0,577,578,5,88,0,0,578,595,5,65,0,0,579,580,5,76,0,0,580,
  	581,5,65,0,0,581,595,5,83,0,0,582,583,5,68,0,0,583,584,5,67,0,0,584,595,
  	5,80,0,0,585,586,5,83,0,0,586,587,5,66,0,0,587,595,5,88,0,0,588,589,5,
  	73,0,0,589,590,5,83,0,0,590,595,5,66,0,0,591,592,5,85,0,0,592,593,5,83,
  	0,0,593,595,5,66,0,0,594,531,1,0,0,0,594,534,1,0,0,0,594,537,1,0,0,0,
  	594,540,1,0,0,0,594,543,1,0,0,0,594,546,1,0,0,0,594,549,1,0,0,0,594,552,
  	1,0,0,0,594,555,1,0,0,0,594,558,1,0,0,0,594,561,1,0,0,0,594,564,1,0,0,
  	0,594,567,1,0,0,0,594,570,1,0,0,0,594,573,1,0,0,0,594,576,1,0,0,0,594,
  	579,1,0,0,0,594,582,1,0,0,0,594,585,1,0,0,0,594,588,1,0,0,0,594,591,1,
  	0,0,0,595,118,1,0,0,0,596,597,5,65,0,0,597,120,1,0,0,0,598,599,3,45,22,
  	0,599,122,1,0,0,0,43,0,129,135,138,142,144,184,189,191,194,209,217,219,
  	228,233,240,248,254,259,261,270,275,288,290,292,294,296,298,300,313,326,
  	332,410,436,450,469,480,491,505,513,521,529,594,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  asm6502lexerLexerStaticData = staticData.release();
}

}

asm6502Lexer::asm6502Lexer(CharStream *input) : Lexer(input) {
  asm6502Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *asm6502lexerLexerStaticData->atn, asm6502lexerLexerStaticData->decisionToDFA, asm6502lexerLexerStaticData->sharedContextCache);
}

asm6502Lexer::~asm6502Lexer() {
  delete _interpreter;
}

std::string asm6502Lexer::getGrammarFileName() const {
  return "asm6502.g4";
}

const std::vector<std::string>& asm6502Lexer::getRuleNames() const {
  return asm6502lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& asm6502Lexer::getChannelNames() const {
  return asm6502lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& asm6502Lexer::getModeNames() const {
  return asm6502lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& asm6502Lexer::getVocabulary() const {
  return asm6502lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView asm6502Lexer::getSerializedATN() const {
  return asm6502lexerLexerStaticData->serializedATN;
}

const atn::ATN& asm6502Lexer::getATN() const {
  return *asm6502lexerLexerStaticData->atn;
}




void asm6502Lexer::initialize() {
  std::call_once(asm6502lexerLexerOnceFlag, asm6502lexerLexerInitialize);
}
